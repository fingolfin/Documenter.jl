name: 'Regression Tests'
on:
  workflow_dispatch:
  push:
    branches:
      - master
      - release-*
      # You can suffix the branch name with '-runci' to run the CI on that branch
      # without having to open a pull request. This is useful for long-lived branches.
      - '*/*-runci'
    tags: '*'
  pull_request:
    paths:
      - '.github/workflows/regression-tests.yml'
      - 'Project.toml'
jobs:
  test-dependent-packages:
    name: run-tests-${{ matrix.package }}
    runs-on: ubuntu-latest
    env:
      PACKAGE: ${{ matrix.package }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - package: 'DocumenterCitations'
          - package: 'DocumenterInterLinks'
          - package: 'DocumenterMermaid'
          - package: 'Asciicast'
          - package: 'DocumenterPages'
          - package: 'DocumenterDescriptions'
          - package: 'DocumenterVitepress'
    steps:
      - uses: actions/checkout@v5
      - uses: julia-actions/setup-julia@v2
        with:
          version: '1'
      - uses: julia-actions/cache@v2
      - uses: julia-actions/julia-buildpkg@v1
      - name: Test
        shell: julia --color=yes {0}
        run: |
          import Pkg
          Pkg.develop(Pkg.PackageSpec(; path = pwd()))
          Pkg.develop(ENV["PACKAGE"])
          Pkg.test(ENV["PACKAGE"])
  test-documentation-build:
    name: doc-build-${{ matrix.package }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - package: 'MathOptInterface'
          - package: 'Oscar'
    steps:
      - uses: actions/checkout@v5
      - uses: julia-actions/setup-julia@v2
        with:
          version: '1'
      - uses: julia-actions/cache@v2
      - name: install-and-build-documentation
        shell: julia --color=yes {0}
        run: |
          package = "${{ matrix.package }}"
          import Pkg
          # Install the PACKAGE into `Pkg.devdir()`
          Pkg.develop(package)
          # Assume that there is an docs/Project.toml
          doc_path = joinpath(Pkg.devdir(), package, "docs")
          Pkg.activate(doc_path)
          # Change the TOML to include the package and this version of Documenter
          Pkg.develop(package)
          Pkg.develop(Pkg.PackageSpec(path=pwd()))
          # special hack to make OSCAR tests work *sigh*
          if package == "Oscar"
            #AbstractAlgebra, Nemo, Hecke, Singular, GAP, Polymake
            Pkg.add("Hecke")
          end
          # Install
          Pkg.instantiate()
          # Build the docs
          include(joinpath(doc_path, "make.jl"))
